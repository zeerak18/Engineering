package chatclient;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import models.Message;
import models.User;


public class ChatGUI extends javax.swing.JFrame {
    
    SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss a");
    private User user_self;
    private Socket socket;
    private ObjectOutputStream Oos;
    private ObjectInputStream Ois;
    private Message message;
    
    /**
     * Creates new Chat form GUI
     */
    
    public ChatGUI(User user, Socket socket, 
            ObjectOutputStream Oos, ObjectInputStream Ois) throws IOException {

        initComponents();
        this.user_self = user;
        
        labelUsername.setText(user_self.getUsername());
        
        this.socket = socket;
        this.Oos = Oos;
        this.Ois = Ois;
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        this.appendMessage(user.getUsername() + " has joined the chat", Color.BLUE);
        
        // this will set btnSend button as default 
        // press enter key to send message after typing
        this.getRootPane().setDefaultButton(btnSend);

        choiceMsgColor.addItem("Select color");
        List<String> colors = Arrays.asList("Red", "Yellow", "Green", "Black", "Blue", "Magenta",
                "Dark", "Pink", "Orange");
        for (String color : colors) {
            choiceMsgColor.addItem(color);
        }
        
    }
    
    public void updateMessagesFromServer() {
        // updating messages of the message field from server 
        if(socket.isConnected()){
            Thread chatSocketThread = new Thread(new ChatSocketThread(this, socket, Ois, user_self));
            chatSocketThread.start();
        }
    }
    
    public final void appendMessage(String msg, Color color){
        Date date = new Date();
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, color);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = txtPaneMsgs.getDocument().getLength();
        txtPaneMsgs.setCaretPosition(len);
        txtPaneMsgs.setCharacterAttributes(aset, false);
//        txtPaneMsgs.replaceSelection(sdf.format(date) +": "+ msg +"\n");
        txtPaneMsgs.replaceSelection(msg +"\n");
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtPaneMsgs = new javax.swing.JTextPane();
        txtMsg = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        labelUsername = new javax.swing.JLabel();
        choiceMsgColor = new java.awt.Choice();
        btnImgUpload = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(txtPaneMsgs);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("CHAT FORUM");

        labelUsername.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelUsername.setForeground(new java.awt.Color(51, 153, 0));

        btnImgUpload.setText("...");
        btnImgUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImgUploadActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 51));
        jLabel2.setText("New Feature: Chat privately with another user by adding @username before your message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelUsername)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(204, 204, 204))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnImgUpload)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(choiceMsgColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSend)))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(choiceMsgColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnImgUpload))
                    .addComponent(btnSend, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pack();
    }

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        
        if (socket.isConnected()) {
            try {
                String color = choiceMsgColor.getSelectedItem();
                Color cl = getColor(color);
                if (message == null) {
                    System.out.println("msg " + txtMsg.getText());
                    String msg = user_self.getUsername() + ": " + txtMsg.getText();
                    msg = cencoredSwearWordsInMessage(msg);
                    
                    this.appendMessage(msg, cl);

                    message = new Message();
                    message.setType("text");
                    message.setContent(msg);
                    
                } else {
                    if (message.getType().equals("image")) {
                        this.appendMessage("", cl); // to go for new line
                        
                        ImageIcon imageIcon = new ImageIcon(message.getFilePath()); // load the image to a imageIcon
                        Image image = imageIcon.getImage(); // transform it 
                        // resize image to fit in the chat field
                        Image resizedImg = image.getScaledInstance(250, 250,  java.awt.Image.SCALE_SMOOTH); 

                        txtPaneMsgs.insertIcon(new ImageIcon(resizedImg));
                        this.appendMessage("", cl); // to go for new line
                        this.appendMessage(message.getContent(), cl);
                    }
                }
                message.setUser(user_self);
                txtMsg.setText("");
                
                Oos.writeObject(message);
                
            } catch (IOException ex) {
                Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            message = null; // reset message
        }
        
    }//event_btnSendActionPerformed
    
    public void insertImageToTxtPaneMsgs(Image image) {
        txtPaneMsgs.insertIcon(new ImageIcon(image));
        appendMessage(" ", Color.RED);
    }
    private void btnImgUploadActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("select image");
        chooser.addChoosableFileFilter(new ImageFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        
        if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            BufferedInputStream bis = null;
            try {
                File file = chooser.getSelectedFile();
                
                message = new Message();
                message.setFileName(file.getName());
                message.setFilePath(file.getAbsolutePath());
                message.setType("image");
                byte[] fileDatas = new byte[(int)file.length()]; // file size must be maximum 64 MB
                bis = new BufferedInputStream(new FileInputStream(file));
                
                bis.read(fileDatas);
                message.setFileData(fileDatas);
                
                String msg = user_self.getUsername() + ": " + txtMsg.getText();
                msg = cencoredSwearWordsInMessage(msg);
                message.setContent(msg); // can be empty or some text with username at the beginning
                
                txtMsg.setText(txtMsg.getText() + " Image: " + file.getName());

            } catch (FileNotFoundException ex) {
                Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    bis.close();
                } catch (IOException ex) {
                    Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnImgUploadActionPerformed
    
    public JTextPane getTxtPaneMsgs() {
        return txtPaneMsgs;
    }
    private Color getColor(String color) {
        Color cl = Color.BLUE;
        
        switch(color) {
            case "Red":
                cl = Color.RED;
                break;
            case "Green":
                cl = Color.GREEN;
                break;
            case "Yellow":
                cl = Color.YELLOW;
                break;
            case "Black":
                cl = Color.BLACK;
                break;
            case "Magenta":
                cl = Color.MAGENTA;
                break;
            case "Dark Gray":
                cl = Color.DARK_GRAY;
                break;
            case "Pink":
                cl = Color.PINK;
                break;
            case "Orange":
                cl = Color.ORANGE;
                break;
        }
        return cl;
    }
    
    private String cencoredSwearWordsInMessage(String message) {
        List<String> words = Arrays.asList("fuck", "shit", "bullshit", "ass", 
                "damn", "bitch", "cunt", "dick", "penis", "retard", "whore", "xxx"); // swear words
        for (String word : words) {
            Pattern rx = Pattern.compile(word, Pattern.CASE_INSENSITIVE);
            message = rx.matcher(message).replaceAll(new String(new char[word.length()]).replace('\0', '*'));
        }
        
        return message;
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ChatForumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ChatForumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ChatForumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ChatForumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ChatForumForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImgUpload;
    private javax.swing.JButton btnSend;
    private java.awt.Choice choiceMsgColor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JTextField txtMsg;
    private javax.swing.JTextPane txtPaneMsgs;
    // End of variables declaration//GEN-END:variables
    
    class ImageFilter extends FileFilter {
        public final static String JPEG = "jpeg";
        public final static String JPG = "jpg";
        public final static String GIF = "gif";
        public final static String TIFF = "tiff";
        public final static String TIF = "tif";
        public final static String PNG = "png";

        @Override
        public boolean accept(File f) {
           if (f.isDirectory()) {
              return true;
           }

           String extension = getExtension(f);
           if (extension != null) {
              if (extension.equals(TIFF) ||
                 extension.equals(TIF) ||
                 extension.equals(GIF) ||
                 extension.equals(JPEG) ||
                 extension.equals(JPG) ||
                 extension.equals(PNG)) {
                 return true;
              } else {
                 return false;
              }
           }
           return false;
        }

        @Override
        public String getDescription() {
           return "Image Only";
        }

        String getExtension(File f) {
           String ext = null;
           String s = f.getName();
           int i = s.lastIndexOf('.');

           if (i > 0 &&  i < s.length() - 1) {
              ext = s.substring(i+1).toLowerCase();
           }
           return ext;
        } 
    }
}
